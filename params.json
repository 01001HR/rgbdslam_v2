{"name":"Rgbdslam v2","tagline":"RGB-D SLAM for ROS Hydro","body":"# RGBDSLAM<i>v2</i> \r\n... is a state-of-the-art SLAM system for RGB-D cameras, e.g., the Microsoft Kinect.\r\nYou can use it to create highly accurate 3D point clouds or OctoMaps. \r\n\r\nRGBDSLAMv2 is based on the ROS project, OpenCV, PCL, OctoMap, SiftGPU and more - thanks!\r\n\r\nA journal article with a system description and performance evaluation \r\ncan be found in the following publication:\r\n\r\n\"3D Mapping with an RGB-D Camera\",<br/>\r\n*F. Endres, J. Hess, J. Sturm, D. Cremers, W. Burgard*,<br/>\r\nIEEE Transactions on Robotics, 2014.\r\n\r\nAdditional information can be found here:<br/>\r\n* www.informatik.uni-freiburg.de/~endres\r\n* http://www.ros.org/wiki/rgbdslam\r\n* http://answers.ros.org/questions/tags:rgbdslam\r\n\r\n<img src=\"https://raw.githubusercontent.com/felixendres/rgbdslam_v2/hydro/media/rgbdslamv2_fr2desk.jpg\" alt=\"RGBDSLAM on the RGB-D Benchmark Dataset\" width=\"600\">\r\n\r\n# Prerequisites  ################################################################\r\n- Ubuntu 12.04 - 13.04\r\n- [ROS hydro](http://wiki.ros.org/hydro/)\r\n- Problems may occur when using a version of the PCL library different from the ROS hydro version.\r\n\r\n# Installation ################################################################\r\nThe installation of RGBDSLAMv2 for ROS hydro should be straigh.\r\nA copy-pastable walkthrough can be found below\r\n\r\n1. Put RGBDSLAMv2 in a catkin workspace: See [the catkin tutorial](http://wiki.ros.org/catkin/Tutorials/create_a_workspace) \r\n  for details. Use git to clone this repository into your workspace's \"src/\" directory. Or download RGBDSLAMv2 as an [archive](http://codeload.github.com/felixendres/rgbdslam_v2/zip/hydro) and extract it to \"src/\".\r\n\r\n3. Use rosdep (i.e. \"rosdep install rgbdslam\") to install missing \r\n  dependencies. For details see http://wiki.ros.org/ROS/Tutorials/rosdep\r\n\r\n4. To build RGBDSLAMv2 go to your catkine workspace and execute \"catkin_make\". \r\n   If you get an error about the missing siftgpu library, execute \"catkin_make\" again.\r\n\r\n\r\n##Installation from Scratch #####################################################\r\nAssuming you have installed ROS hydro on Ubuntu, issue the following commands in \r\na terminal (or copy-paste the whole sequence at once)\r\n\r\n\t#Prepare Workspace\r\n\tsource /opt/ros/hydro/setup.bash\r\n\tmkdir -p ~/rgbdslam_catkin_ws/src\r\n\tcd ~/rgbdslam_catkin_ws/src\r\n\tcatkin_init_workspace\r\n\tcd ~/rgbdslam_catkin_ws/\r\n\tcatkin_make\r\n\tsource devel/setup.bash\r\n\t\r\n\t#Get RGBDSLAM\r\n\tcd ~/rgbdslam_catkin_ws/src\r\n\twget -q http://github.com/felixendres/rgbdslam_v2/archive/hydro.zip\r\n\tunzip -q hydro.zip\r\n\tcd ~/rgbdslam_catkin_ws/\r\n\t\r\n\t#Install\r\n\trosdep update\r\n\trosdep install rgbdslam\r\n\tcatkin_make\r\n        catkin_make\r\n\r\n# Installation done! What's next?\r\nSee the sections below for more details on the usage. \r\nBut to get you started quickly here's the most important pointers:\r\n\r\n-   If you want to use RGBDSLAMv2 with an RGB-D camera you may have\r\n    to install openni (sudo apt-get install ros-hydro-openni-launch).\r\n\r\n-   Check out the launch files in \"launch/\" for examples and specific \r\n    use cases. roslaunch rgbdslam openni+rgbdslam.launch is a good starting \r\n    point for live mapping.\r\n\r\n-   Check out the README in \"test/\" for running, testing and evaluating\r\n    RGBDSLAMv2 on Juergen Sturm's RGB-D SLAM Dataset and Benchmark:\r\n    http://vision.in.tum.de/data/datasets/rgbd-dataset\r\n\r\n<img src=\"http://raw.githubusercontent.com/felixendres/rgbdslam_v2/hydro/media/rgbdslamv2_empty.jpg\" alt=\"RGBDSLAM right after startup\" width=\"600\">\r\n\r\n## IMPORTANT NOTE ################################################################\r\nThis software is an update of the ROS Fuerte version of RGBDSLAM. However\r\nmany things have changed, so some of the DOCUMENTATION BELOW MAY BE OUTDATED.\r\nPlease report problems with the documentation. Thanks.\r\n\r\n# Configuration ##############################################################\r\n\r\nThere are several example launch-files that set the parameters of RGB-D SLAM\r\nfor certain use cases. For a definitive list of all settings and their default\r\nsettings have a look at their quite readable definition in\r\nsrc/parameter_server.cpp or (with the current settings instead of the default)\r\nin the GUI Menu Settings->View Current Settings.\r\n\r\nThe various use-case launch-files might not work correctly yet, as they are not\r\nregularly tested. You should get them running if you fiddle with the topics\r\n(\"rostopic list\" and \"rosnode info\" will help you.  \"rqt_graph\" is great too).\r\n\r\n\r\n\r\n# Usage ##############################################################\r\n\r\nMost people seem to want the registered point cloud. It is by default sent out\r\non /rgbdslam/batch_clouds when you command RGB-D SLAM to do so (see below). The\r\nclouds sent are actually the same as before, but the according transformation -\r\nby default from /map to /openni_camera - is sent out on /tf.\r\n\r\nThe octoMap library is compiled into the rgbdslam node. This allows to create\r\nthe octomap directly. In the GUI this can be done by selecting \"Save Octomap\"\r\nfrom the \"Data\" Menu. Online octomapping is possible, but not recommended.\r\n\r\n<img src=\"http://raw.githubusercontent.com/felixendres/rgbdslam_v2/hydro/media/rgbdslamv2_fr2desk_octomap.jpg\" width=\"600\" alt=\"OctoMap created from the RGB-D Benchmark sequence fr2/desk\">\r\n## Usage with GUI #################################################################\r\n\r\nTo start RGBDSLAMv2 launch, e.g.,\r\n$ roslaunch rgbdslam openni+rgbdslam.launch\r\n\r\nAlternatively you can start the openni nodes and RGBDSLAMv2 separately, e.g.:\r\nroslaunch openni_camera openni_node.launch \r\nroslaunch rgbdslam rgbdslam.launch\r\n\r\nTo capture models either press space to start recording a continuous stream or\r\npress enter to record a single frame. To reduce data redundancy, sequential\r\nframes from (almost) the same position are not included in the final model.\r\n\r\nParameters\r\nRGBDSLAMv2 is customizable by parameters. These should be set in the launch\r\nfile. Parameters can be changed during operation from the GUI, however, \r\nchanges from the GUI may have no effect for many parameters.\r\n\r\nVisualization\r\nThe 3D visualization shows the globally optimized model (you might have\r\nto click into it to update the view after optimization). Neighbouring\r\npoints can be triangulated except at missing values and depth jumps. With\r\nthe shortcut \"t\", triangulation can be toggled. Since raw points render\r\nslightly faster the parameter \"cloud_display_type\" controls whether \r\ntriangulation is computed at all - at the time the cloud is received.\r\nThe parameter \"gl_point_size\" may be useful to most users.\r\n\r\n\r\n## Usage without GUI ##############################################################\r\n\r\nThe RosUI is an alternative to the Grapical_UI to run the rgbdslam headless,\r\nfor example on the PR2.  rgbdslam can then be used via service-calls.\r\nThe possible calls are:\r\n * /rgbdslam/ros_ui   {reset,  quick_save,  send_all,  delete_frame,  optimize,  reload_config, save_trajectory}\r\n * /rgbdslam/ros_ui_b {pause, record} {true, false}\r\n * /rgbdslam/ros_ui_f {set_max} {float}\r\n * /rgbdslam/ros_ui_s {save_octomap,  save_cloud,  save_g2o_graph,  save_trajectory,  save_features,  save_individual} {filename}\r\n\r\nTo start the rgbdslam headless use the headless.launch: \r\n$ roslaunch rgbdslam headless.launch\r\n\r\nCapture single frames via: \r\n$ rosservice call /rgbdslam/ros_ui frame\r\n\r\nCapture a stream of data: \r\n$ rosservice call /rgbdslam/ros_ui_b pause false\r\n\r\nSend point clouds with computed transformations (e.g., to rviz or octomap_server): \r\n$ rosservice call /rgbdslam/ros_ui send_all\r\n\r\nSave data using one of the following:\r\n\r\nAll pointclouds in one file quicksave.pcd in rgbdslam/bin-directory: \r\n$ rosservice call /rgbdslam/ros_ui_s save_cloud\r\n\r\nEvery pointcloud in its own file in rgbdslam/bin-directory: \r\n$ rosservice call /rgbdslam/ros_ui save_individual\r\n\r\n/rgbdslam/ros_ui: \r\n\t\r\n * reset\t''resets the graph, delets all nodes (refreshes only when capturing new images)''\r\n * frame\t''capture one frame from the sensor''\r\n * optimize\t''trigger graph optimizer''\r\n * reload_config\t''reloads the paramters from the ROS paramter server''\r\n * quick_save ''saves all pointclouds in one file quicksave.pcd in rgbdslam/bin-directory''\r\n * send_all\t''sends all pointclouds to /rgbdslam/transformed_cloud (can be visualized with rviz)''\r\n * delete_frame\t''delete the last frame from the graph (refreshes only when capturing new images)''\r\n\t\r\n/rgbdslam/ros_ui_b: \r\n\r\n * pause <flag>\t''pauses or resumes the capturing of images'' \r\n * record <flag>  ''pauses or stops the recording of bag-files, can be found in the rgbdslam/bin-directory''\r\n\t\r\n/rgbdslam/ros_ui_f: \r\n\r\n * set_max <float>\t''filters out all datapoints further away than this value (in cm, only for saving to files)''\r\n\r\n/rgbdslam/ros_ui_s: \r\n\r\n * save_features <filname> ''saves the feature locations and descriptors in a yaml file with the given filename''\r\n * save_cloud\t<filename> ''saves the cloud to the given filename (should end with .ply or .pcd)''\r\n * save_individual <fileprefix>\t''saves every scan in its own file (appending a suffix to the given prefix)''\r\n * save_octomap\t<filename> ''saves the cloud to the given filename''\r\n * save_trajectory\t<fileprefix> ''saves the sensor trajectory to the file <fileprefix>_estimate.txt''\r\n\r\n\r\n\r\n# Further Help ##################################################################\r\n\r\n1. If you are located in Germany and get errors loading the saved ply files\r\ninto meshlab, try switching to U.S. locale or replace the decimal point with a\r\ncomma in your .ply file \r\n2. To speed up compile times consider to use \"export ROS_PARALLEL_JOBS=-j<#cpus>\"\r\nbefore rosmake, but you should have lots of memory as gcc may take up to 2GB \r\nfor four parallel jobs.\r\n\r\nIf you have questions regarding installation or usage of RGBDSLAM please refer\r\nto http://answers.ros.org/questions/?tags=RGBDSLAM For further questions,\r\nsuggestions, corrections of this README or to submit patches, please contact\r\nFelix Endres (endres@informatik.uni-freiburg.de).\r\n\r\nApart from this manual, detailed code documentation can be created using rosdoc\r\n(\"rosrun rosdoc rosdoc rgbdslam\"), which will create a \"doc\" folder in your\r\ncurrent directory.\r\n\r\n\r\n\r\n## GICP and SIFTGPU ###############################################################\r\n\r\nIf there are problems related to the compilation or linking of GICP or SIFTGPU,\r\nyou can deactivate these features at the top of CMakeLists.txt. You might get\r\neven faster GPU features setting SIFT_GPU_MODE to 1 (CUDA) but you will need to\r\ninstall proprietary drivers: SiftGPU uses (in our case) CUDA, which needs a new\r\nNVidia GPU (see http://www.nvidia.com/object/cuda_gpus.html).  For installing\r\nthe development drivers and the CUDA SDK you can use the following tutorial:\r\nhttp://sublimated.wordpress.com/2011/03/25/installing-cuda-4-0-rc-on-ubuntu-10-10-64-bit/\r\nor for ubuntu 10.04: http://ubuntuforums.org/showthread.php?t=1625433 (tested\r\non Ubuntu 10.04 x64) To use SiftGPU you should install \"libdevil-dev\".\r\n  \r\n  Additional compiling information can be changed in\r\n  external/siftgpu/linux/makefile.\r\n\r\n  GICP Generalized ICP can be (de)activated for refining the registration. For\r\n  more information see http://stanford.edu/~avsegal/generalized_icp.html\r\n\r\n\r\n\r\n# License Information ############################################################\r\n\r\nThis software is distributed in the hope that it will be useful, but WITHOUT\r\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\nFOR A PARTICULAR PURPOSE.\r\n\r\nRGBDSLAM is licenced under GPL v.3. See the accompanying file \"COPYING\".\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}